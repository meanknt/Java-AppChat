/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userChat;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import org.json.JSONArray;
import org.json.JSONObject;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author beaslzlo
 */
public class topic2 extends javax.swing.JFrame {

    public String txt;
    private String sYear;
    private String sDescrip;
    private String sMonth;
    private String sDay;
    private String sSubject;

    /**
     * Creates new form topic2
     */
    public topic2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(52, 152, 219));

        jLabel1.setFont(new java.awt.Font("Gill Sans", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Add work");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jCheckBox1.setFont(new java.awt.Font("Gill Sans", 0, 18)); // NOI18N
        jCheckBox1.setText("   Homework");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setFont(new java.awt.Font("Gill Sans", 0, 18)); // NOI18N
        jCheckBox2.setText("   Assignment");

        jCheckBox3.setFont(new java.awt.Font("Gill Sans", 0, 18)); // NOI18N
        jCheckBox3.setText("   Project");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(28, 40, 51));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Gill Sans", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Description");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(jLabel2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(358, 358, 358)
                        .addComponent(jButton1)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Gill Sans", 1, 24)); // NOI18N
        jLabel3.setText("Dead line");

        jTextPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextPane1.setFont(new java.awt.Font("Gill Sans", 0, 14)); // NOI18N
        jTextPane1.setSelectionColor(new java.awt.Color(52, 152, 219));
        jScrollPane3.setViewportView(jTextPane1);

        jTextPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextPane2.setFont(new java.awt.Font("Gill Sans", 0, 14)); // NOI18N
        jTextPane2.setSelectionColor(new java.awt.Color(52, 152, 219));
        jScrollPane4.setViewportView(jTextPane2);

        jTextPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextPane3.setFont(new java.awt.Font("Gill Sans", 0, 14)); // NOI18N
        jTextPane3.setSelectionColor(new java.awt.Color(52, 152, 219));
        jScrollPane5.setViewportView(jTextPane3);

        jLabel4.setFont(new java.awt.Font("Gill Sans", 0, 18)); // NOI18N
        jLabel4.setText("Day");

        jLabel5.setFont(new java.awt.Font("Gill Sans", 0, 18)); // NOI18N
        jLabel5.setText("Month");

        jLabel6.setFont(new java.awt.Font("Gill Sans", 0, 18)); // NOI18N
        jLabel6.setText("Year");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(303, 303, 303))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel6)))
                                .addGap(134, 134, 134))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(184, 184, 184))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)))
                .addGap(10, 10, 10)
                .addComponent(jCheckBox3)
                .addGap(40, 40, 40)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();

        try {
            String descrip, day, month, year, homework;
            descrip = jTextArea1.getText();
            day = jTextPane1.getText().toString();
            month = jTextPane2.getText().toString();
            year = jTextPane3.getText().toString();

            ArrayList<JSONObject> MyArrJson = new ArrayList<JSONObject>();
            JSONObject object;

            object = new JSONObject();

            boolean numeric1 = true;
            boolean numeric2 = true;
            boolean numeric3 = true;
            try {
                Double num1 = Double.parseDouble(day);
                Double num2 = Double.parseDouble(month);
                Double num3 = Double.parseDouble(year);
            } catch (NumberFormatException e) {
                numeric1 = false;
                numeric2 = false;
                numeric3 = false;
            }

            boolean selected1 = jCheckBox1.isSelected();
            boolean selected2 = jCheckBox2.isSelected();
            boolean selected3 = jCheckBox3.isSelected();
            if (selected1) {
                homework = jCheckBox1.getText().toString();
                if (numeric1 || numeric2 || numeric3) {
                    if (Integer.parseInt(day) <= 31 || Integer.parseInt(day) <= 12) {
                        object.put("Day", day);
                        object.put("Month", month);
                        object.put("Year", year);
                        object.put("Description", descrip);
                        object.put("Subject", homework);
                        MyArrJson.add(object);
                        JSONArray json = new JSONArray(MyArrJson);

                        PreparedStatement ps;
                        ResultSet rs;
                        String query = "INSERT INTO `addwork`(`json`) VALUES (?)";

                        try {
                            My_CNK con = new My_CNK();
                            ps = con.ConnectDataBase().prepareStatement(query);
                            ps.setString(1, json.toString());
                            if (ps.executeUpdate() >= 0) {
                                JOptionPane.showMessageDialog(null, "เพิ่มการบ้านแล้ว");
                            }

                        } catch (SQLException ex) {
                            Logger.getLogger(topic2.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        MyArrJson.add(object);
                        JSONArray json = new JSONArray(MyArrJson);
                        JOptionPane.showMessageDialog(null, "Error: ใส่วันให้ถูกต้อง");
                    }

                } else {
                    MyArrJson.add(object);
                    JSONArray json = new JSONArray(MyArrJson);
                    JOptionPane.showMessageDialog(null, "Error: วันเดือนปีเกิดต้องเป็นตัวเลขเท่านั้น");
                }

            } else if (selected2) {
                homework = jCheckBox2.getText().toString();
                if (numeric1 || numeric2 || numeric3) {
                    if (Integer.parseInt(day) <= 31 || Integer.parseInt(day) <= 12) {
                        object.put("Day", day);
                        object.put("Month", month);
                        object.put("Year", year);
                        object.put("Description", descrip);
                        object.put("Subject", homework);
                        MyArrJson.add(object);
                        JSONArray json = new JSONArray(MyArrJson);

                        PreparedStatement ps;
                        ResultSet rs;
                        String query = "INSERT INTO `addwork`(`json`) VALUES (?)";

                        try {
                            My_CNK con = new My_CNK();
                            ps = con.ConnectDataBase().prepareStatement(query);
                            ps.setString(1, json.toString());
                            if (ps.executeUpdate() >= 0) {
                                JOptionPane.showMessageDialog(null, "Add work แล้ว");
                            }

                        } catch (SQLException ex) {
                            Logger.getLogger(topic2.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        MyArrJson.add(object);
                        JSONArray json = new JSONArray(MyArrJson);
                        JOptionPane.showMessageDialog(null, "Error: ใส่วันให้ถูกต้อง");
                    }

                } else {
                    MyArrJson.add(object);
                    JSONArray json = new JSONArray(MyArrJson);
                    JOptionPane.showMessageDialog(null, "Error: วันเดือนปีเกิดต้องเป็นตัวเลขเท่านั้น");
                }
            } else if (selected3) {
                homework = jCheckBox3.getText().toString();
                if (numeric1 || numeric2 || numeric3) {
                    if (Integer.parseInt(day) <= 31 || Integer.parseInt(day) <= 12) {
                        object.put("Day", day);
                        object.put("Month", month);
                        object.put("Year", year);
                        object.put("Description", descrip);
                        object.put("Subject", homework);
                        MyArrJson.add(object);
                        JSONArray json = new JSONArray(MyArrJson);

                        PreparedStatement ps;
                        ResultSet rs;
                        String query = "INSERT INTO `addwork`(`json`) VALUES (?)";

                        try {
                            My_CNK con = new My_CNK();
                            ps = con.ConnectDataBase().prepareStatement(query);
                            ps.setString(1, json.toString());
                            if (ps.executeUpdate() >= 0) {
                                JOptionPane.showMessageDialog(null, "เพิ่มการบ้านแล้ว");
                            }

                        } catch (SQLException ex) {
                            Logger.getLogger(topic2.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        MyArrJson.add(object);
                        JSONArray json = new JSONArray(MyArrJson);
                        JOptionPane.showMessageDialog(null, "Error: ใส่วันให้ถูกต้อง");
                    }

                } else {
                    MyArrJson.add(object);
                    JSONArray json = new JSONArray(MyArrJson);
                    JOptionPane.showMessageDialog(null, "Error: วันเดือนปีเกิดต้องเป็นตัวเลขเท่านั้น");
                }
            } else {
                MyArrJson.add(object);
                JSONArray json = new JSONArray(MyArrJson);
                JOptionPane.showMessageDialog(null, "Error: โปรดเลือกงานที่ต้องการส่ง");
            }

//            object.put("Day", day);
//
//            object.put("Month", month);
//
//            object.put("Year", year);
        } catch (Exception e) {
            e.printStackTrace();
        }
        // send message in add frame.
//        String sql_read = "SELECT * FROM addwork";
//        My_CNK db = new My_CNK();
//        ResultSet rs;
//        int num = 0, num2 = 0;
//        
//        try {
//            Connection con = db.ConnectDataBase();
//            rs = con.createStatement().executeQuery(sql_read); //สร้าง Statement แล้วเอาข้อมูลที่อ่านได้ยัดเข้า แล้วเก็บในตัวแปร rs
//            while (rs.next()) { //รันข้อมูลไปเลื่อยๆจนข้อมูลหมด
////            String txt = rs.getString(1);
////            System.out.println(txt);
//                num++;
//            }
//            rs = con.createStatement().executeQuery(sql_read);
//            while (rs.next()) {
//                num2++;
//                if (num == num2) {
//                    txt = rs.getString(1);
//                    System.out.println(txt);
//                }
//            }
//            try {
//
////                String strJSON = "[{\"MemberID\":\"1\",\"Name\":\"Weerachai\",\"Tel\":\"0819876107\"}"
////                        + ",{\"MemberID\":\"2\",\"Name\":\"Win\",\"Tel\":\"021978032\"}"
////                        + ",{\"MemberID\":\"3\",\"Name\":\"Eak\",\"Tel\":\"0876543210\"}]";
//
//                JSONArray data = new JSONArray(txt);
//
//                ArrayList<HashMap<String, String>> myArrList = new ArrayList<HashMap<String, String>>();
//
//                HashMap<String, String> map;
//
//                for (int i = 0; i < data.length(); i++) {
//
//                    JSONObject c = data.getJSONObject(i);
//
//                    map = new HashMap<String, String>();
//
//                    map.put("Month", c.getString("Month"));
//
//                    map.put("Description", c.getString("Description"));
//
//     
//                    map.put("Year", c.getString("Year"));
//                    map.put("Day", c.getString("Day"));
//                    map.put("Subject", c.getString("Subject"));
//
//                    myArrList.add(map);
//
//                }
//
//                for (int i = 0; i < myArrList.size(); i++) {
//
//                    sMemberID = myArrList.get(i).get("Month").toString();
//                    sName = myArrList.get(i).get("Description").toString();
//                    sTel = myArrList.get(i).get("Year").toString();
//                    System.out.println(sMemberID);
//                    System.out.println(sName);
//                    System.out.println(sTel);
//                    System.out.println("=========================");
//
//                }

        
//            } catch (Exception e) {
// TODO Auto-generated catch block
//                e.printStackTrace();
//
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(Add.class.getName()).log(Level.SEVERE, null, ex);
//        }
        //

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(topic2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(topic2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(topic2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(topic2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });

    }

    public void setsDescrip(String sDescrip) {
        this.sDescrip = sDescrip;
    }

    public String getsDescrip() {
        String sql_read = "SELECT * FROM addwork";
        My_CNK db = new My_CNK();
        ResultSet rs;
        int num = 0, num2 = 0;
        try {
            Connection con = db.ConnectDataBase();
            rs = con.createStatement().executeQuery(sql_read); //สร้าง Statement แล้วเอาข้อมูลที่อ่านได้ยัดเข้า แล้วเก็บในตัวแปร rs
            while (rs.next()) { //รันข้อมูลไปเลื่อยๆจนข้อมูลหมด
//            String txt = rs.getString(1);
//            System.out.println(txt);
                num++;
            }
            rs = con.createStatement().executeQuery(sql_read);
            while (rs.next()) {
                num2++;
                if (num == num2) {
                    txt = rs.getString(1);
//                    System.out.println(txt);
                }
            }
            try {

//                String strJSON = "[{\"MemberID\":\"1\",\"Name\":\"Weerachai\",\"Tel\":\"0819876107\"}"
//                        + ",{\"MemberID\":\"2\",\"Name\":\"Win\",\"Tel\":\"021978032\"}"
//                        + ",{\"MemberID\":\"3\",\"Name\":\"Eak\",\"Tel\":\"0876543210\"}]";
                JSONArray data = new JSONArray(txt);

                ArrayList<HashMap<String, String>> myArrList = new ArrayList<HashMap<String, String>>();

                HashMap<String, String> map;

                for (int i = 0; i < data.length(); i++) {

                    JSONObject c = data.getJSONObject(i);

                    map = new HashMap<String, String>();

                    map.put("Month", c.getString("Month"));

                    map.put("Description", c.getString("Description"));

                    map.put("Year", c.getString("Year"));
                    map.put("Day", c.getString("Day"));
                    map.put("Subject", c.getString("Subject"));

                    myArrList.add(map);

                }

                for (int i = 0; i < myArrList.size(); i++) {
                    sSubject = myArrList.get(i).get("Subject").toString();
                    sDay = myArrList.get(i).get("Day").toString();
                    sMonth = myArrList.get(i).get("Month").toString();                  
                    sYear = myArrList.get(i).get("Year").toString();
                    sDescrip = myArrList.get(i).get("Description").toString();
//                    System.out.println(sSubject);
//                    System.out.println(sDay);
//                    System.out.println(sMonth);                    
//                    System.out.println(sYear);
//                    System.out.println(sDescrip);
//                    System.out.println("=========================");

                }

            } catch (Exception e) {

// TODO Auto-generated catch block
                e.printStackTrace();

            }

        } catch (SQLException ex) {
            Logger.getLogger(NewAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sDescrip;
    }
    
    public void setsDay(String sDay) {
        this.sDay = sDay;
    }

    public String getsDay() {
        String sql_read = "SELECT * FROM addwork";
        My_CNK db = new My_CNK();
        ResultSet rs;
        int num = 0, num2 = 0;
        try {
            Connection con = db.ConnectDataBase();
            rs = con.createStatement().executeQuery(sql_read); //สร้าง Statement แล้วเอาข้อมูลที่อ่านได้ยัดเข้า แล้วเก็บในตัวแปร rs
            while (rs.next()) { //รันข้อมูลไปเลื่อยๆจนข้อมูลหมด
//            String txt = rs.getString(1);
//            System.out.println(txt);
                num++;
            }
            rs = con.createStatement().executeQuery(sql_read);
            while (rs.next()) {
                num2++;
                if (num == num2) {
                    txt = rs.getString(1);
//                    System.out.println(txt);
                }
            }
            try {

//                String strJSON = "[{\"MemberID\":\"1\",\"Name\":\"Weerachai\",\"Tel\":\"0819876107\"}"
//                        + ",{\"MemberID\":\"2\",\"Name\":\"Win\",\"Tel\":\"021978032\"}"
//                        + ",{\"MemberID\":\"3\",\"Name\":\"Eak\",\"Tel\":\"0876543210\"}]";
                JSONArray data = new JSONArray(txt);

                ArrayList<HashMap<String, String>> myArrList = new ArrayList<HashMap<String, String>>();

                HashMap<String, String> map;

                for (int i = 0; i < data.length(); i++) {

                    JSONObject c = data.getJSONObject(i);

                    map = new HashMap<String, String>();

                    map.put("Month", c.getString("Month"));

                    map.put("Description", c.getString("Description"));

                    map.put("Year", c.getString("Year"));
                    map.put("Day", c.getString("Day"));
                    map.put("Subject", c.getString("Subject"));

                    myArrList.add(map);

                }

                for (int i = 0; i < myArrList.size(); i++) {
                    sSubject = myArrList.get(i).get("Subject").toString();
                    sDay = myArrList.get(i).get("Day").toString();
                    sMonth = myArrList.get(i).get("Month").toString();                  
                    sYear = myArrList.get(i).get("Year").toString();
                    sDescrip = myArrList.get(i).get("Description").toString();
//                    System.out.println(sSubject);
//                    System.out.println(sDay);
//                    System.out.println(sMonth);                    
//                    System.out.println(sYear);
//                    System.out.println(sDescrip);
//                    System.out.println("=========================");

                }

            } catch (Exception e) {

// TODO Auto-generated catch block
                e.printStackTrace();

            }

        } catch (SQLException ex) {
            Logger.getLogger(NewAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sDay;
    }
    
    public void setsMonth(String sMonth) {
        this.sMonth = sMonth;
    }

    public String getsMonth() {
        String sql_read = "SELECT * FROM addwork";
        My_CNK db = new My_CNK();
        ResultSet rs;
        int num = 0, num2 = 0;
        try {
            Connection con = db.ConnectDataBase();
            rs = con.createStatement().executeQuery(sql_read); //สร้าง Statement แล้วเอาข้อมูลที่อ่านได้ยัดเข้า แล้วเก็บในตัวแปร rs
            while (rs.next()) { //รันข้อมูลไปเลื่อยๆจนข้อมูลหมด
//            String txt = rs.getString(1);
//            System.out.println(txt);
                num++;
            }
            rs = con.createStatement().executeQuery(sql_read);
            while (rs.next()) {
                num2++;
                if (num == num2) {
                    txt = rs.getString(1);
//                    System.out.println(txt);
                }
            }
            try {

//                String strJSON = "[{\"MemberID\":\"1\",\"Name\":\"Weerachai\",\"Tel\":\"0819876107\"}"
//                        + ",{\"MemberID\":\"2\",\"Name\":\"Win\",\"Tel\":\"021978032\"}"
//                        + ",{\"MemberID\":\"3\",\"Name\":\"Eak\",\"Tel\":\"0876543210\"}]";
                JSONArray data = new JSONArray(txt);

                ArrayList<HashMap<String, String>> myArrList = new ArrayList<HashMap<String, String>>();

                HashMap<String, String> map;

                for (int i = 0; i < data.length(); i++) {

                    JSONObject c = data.getJSONObject(i);

                    map = new HashMap<String, String>();

                    map.put("Month", c.getString("Month"));

                    map.put("Description", c.getString("Description"));

                    map.put("Year", c.getString("Year"));
                    map.put("Day", c.getString("Day"));
                    map.put("Subject", c.getString("Subject"));

                    myArrList.add(map);

                }

                for (int i = 0; i < myArrList.size(); i++) {
                    sSubject = myArrList.get(i).get("Subject").toString();
                    sDay = myArrList.get(i).get("Day").toString();
                    sMonth = myArrList.get(i).get("Month").toString();                  
                    sYear = myArrList.get(i).get("Year").toString();
                    sDescrip = myArrList.get(i).get("Description").toString();
//                    System.out.println(sSubject);
//                    System.out.println(sDay);
//                    System.out.println(sMonth);                    
//                    System.out.println(sYear);
//                    System.out.println(sDescrip);
//                    System.out.println("=========================");

                }

            } catch (Exception e) {

// TODO Auto-generated catch block
                e.printStackTrace();

            }

        } catch (SQLException ex) {
            Logger.getLogger(NewAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sMonth;
    }
    
    public void setsYear(String sDescrip) {
        this.sDescrip = sDescrip;
    }

    public String getsYear() {
        String sql_read = "SELECT * FROM addwork";
        My_CNK db = new My_CNK();
        ResultSet rs;
        int num = 0, num2 = 0;
        try {
            Connection con = db.ConnectDataBase();
            rs = con.createStatement().executeQuery(sql_read); //สร้าง Statement แล้วเอาข้อมูลที่อ่านได้ยัดเข้า แล้วเก็บในตัวแปร rs
            while (rs.next()) { //รันข้อมูลไปเลื่อยๆจนข้อมูลหมด
//            String txt = rs.getString(1);
//            System.out.println(txt);
                num++;
            }
            rs = con.createStatement().executeQuery(sql_read);
            while (rs.next()) {
                num2++;
                if (num == num2) {
                    txt = rs.getString(1);
//                    System.out.println(txt);
                }
            }
            try {

//                String strJSON = "[{\"MemberID\":\"1\",\"Name\":\"Weerachai\",\"Tel\":\"0819876107\"}"
//                        + ",{\"MemberID\":\"2\",\"Name\":\"Win\",\"Tel\":\"021978032\"}"
//                        + ",{\"MemberID\":\"3\",\"Name\":\"Eak\",\"Tel\":\"0876543210\"}]";
                JSONArray data = new JSONArray(txt);

                ArrayList<HashMap<String, String>> myArrList = new ArrayList<HashMap<String, String>>();

                HashMap<String, String> map;

                for (int i = 0; i < data.length(); i++) {

                    JSONObject c = data.getJSONObject(i);

                    map = new HashMap<String, String>();

                    map.put("Month", c.getString("Month"));

                    map.put("Description", c.getString("Description"));

                    map.put("Year", c.getString("Year"));
                    map.put("Day", c.getString("Day"));
                    map.put("Subject", c.getString("Subject"));

                    myArrList.add(map);

                }

                for (int i = 0; i < myArrList.size(); i++) {
                    sSubject = myArrList.get(i).get("Subject").toString();
                    sDay = myArrList.get(i).get("Day").toString();
                    sMonth = myArrList.get(i).get("Month").toString();                  
                    sYear = myArrList.get(i).get("Year").toString();
                    sDescrip = myArrList.get(i).get("Description").toString();
//                    System.out.println(sSubject);
//                    System.out.println(sDay);
//                    System.out.println(sMonth);                    
//                    System.out.println(sYear);
//                    System.out.println(sDescrip);
//                    System.out.println("=========================");

                }

            } catch (Exception e) {

// TODO Auto-generated catch block
                e.printStackTrace();

            }

        } catch (SQLException ex) {
            Logger.getLogger(NewAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sYear;
    }
    
    public void setsSubject(String sSybject) {
        this.sSubject = sSubject;
    }

    public String getsSubject() {
        String sql_read = "SELECT * FROM addwork";
        My_CNK db = new My_CNK();
        ResultSet rs;
        int num = 0, num2 = 0;
        try {
            Connection con = db.ConnectDataBase();
            rs = con.createStatement().executeQuery(sql_read); //สร้าง Statement แล้วเอาข้อมูลที่อ่านได้ยัดเข้า แล้วเก็บในตัวแปร rs
            while (rs.next()) { //รันข้อมูลไปเลื่อยๆจนข้อมูลหมด
//            String txt = rs.getString(1);
//            System.out.println(txt);
                num++;
            }
            rs = con.createStatement().executeQuery(sql_read);
            while (rs.next()) {
                num2++;
                if (num == num2) {
                    txt = rs.getString(1);
//                    System.out.println(txt);
                }
            }
            try {

//                String strJSON = "[{\"MemberID\":\"1\",\"Name\":\"Weerachai\",\"Tel\":\"0819876107\"}"
//                        + ",{\"MemberID\":\"2\",\"Name\":\"Win\",\"Tel\":\"021978032\"}"
//                        + ",{\"MemberID\":\"3\",\"Name\":\"Eak\",\"Tel\":\"0876543210\"}]";
                JSONArray data = new JSONArray(txt);

                ArrayList<HashMap<String, String>> myArrList = new ArrayList<HashMap<String, String>>();

                HashMap<String, String> map;

                for (int i = 0; i < data.length(); i++) {

                    JSONObject c = data.getJSONObject(i);

                    map = new HashMap<String, String>();

                    map.put("Month", c.getString("Month"));

                    map.put("Description", c.getString("Description"));

                    map.put("Year", c.getString("Year"));
                    map.put("Day", c.getString("Day"));
                    map.put("Subject", c.getString("Subject"));

                    myArrList.add(map);

                }

                for (int i = 0; i < myArrList.size(); i++) {
                    sSubject = myArrList.get(i).get("Subject").toString();
                    sDay = myArrList.get(i).get("Day").toString();
                    sMonth = myArrList.get(i).get("Month").toString();                  
                    sYear = myArrList.get(i).get("Year").toString();
                    sDescrip = myArrList.get(i).get("Description").toString();
//                    System.out.println(sSubject);
//                    System.out.println(sDay);
//                    System.out.println(sMonth);                    
//                    System.out.println(sYear);
//                    System.out.println(sDescrip);
//                    System.out.println("=========================");

                }

            } catch (Exception e) {

// TODO Auto-generated catch block
                e.printStackTrace();

            }

        } catch (SQLException ex) {
            Logger.getLogger(NewAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sSubject;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

}
